name: Update OTA JSON

#CI计划
on:
  #自动编译：当Auto-Clean运行完成后
  workflow_run:
    workflows: ["Auto-Clean1"]
    types:
      - completed
  #手动编译
  workflow_dispatch:
  
jobs:
  generate-ota-json:
    name: Generate OTA JSON
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest release info
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const latest = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const asset = latest.data.assets.find(a => 
              a.name === ('LEDE-x86-64-generic-squashfs-combined-efi.img.gz');

            if (!asset) {
              core.setFailed("Target firmware not found in the latest release.");
              return;
            }

            const crypto = require('crypto');
            const response = await fetch(asset.browser_download_url);
            const buffer = await response.arrayBuffer();
            const sha256 = crypto.createHash('sha256').update(Buffer.from(buffer)).digest('hex');

            const workflowRun = await github.rest.actions.getWorkflowRun({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: process.env.GITHUB_RUN_ID,
            });

            const workflowStartTime = workflowRun.data.run_started_at;
            const buildDate = Math.floor(new Date(workflowStartTime).getTime() / 1000);

            const json = {
              "x86_64": [
                {
                  "build_date": String(buildDate),
                  "sha256sum": sha256,
                  "url": asset.browser_download_url
                }
              ]
            };

            const fs = require('fs');
            fs.mkdirSync('tmp-api', { recursive: true });
            fs.writeFileSync('tmp-api/ledefw.json', JSON.stringify(json, null, 4));

      - name: Checkout api branch
        run: |
          git fetch origin api:api
          git checkout api
          cp tmp-api/ledefw.json .
          git config user.name "actions-user"
          git config user.email "actions@github.com"
          git add ledefw.json
          git commit -m "Update ledefw.json @ $(date +'%Y-%m-%d %H:%M:%S')')" || echo "No changes to commit"
          git push origin api
