name: 生成OTA升级文件（最近5个版本）

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # 每天UTC 2:00自动运行

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: 检出主分支
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 获取最近5个固件
        id: get_releases
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const { promisify } = require('util');
            const stream = require('stream');
            const pipeline = promisify(stream.pipeline);

            try {
              // 1. 获取最近5个发布（分页处理）
              const releases = await github.paginate(
                github.rest.repos.listReleases,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 5,  // 只获取最新5个
                  request: { timeout: 15000 }
                }
              );

              if (releases.length === 0) {
                throw new Error('仓库中没有发布版本');
              }

              console.log(`📦 共获取 ${releases.length} 个发布`);

              // 2. 处理每个发布的固件
              const processAsset = async (release, asset) => {
                console.log(`⏳ 处理 ${release.tag_name} 的 ${asset.name}`);
                
                // 流式下载计算SHA256
                const hash = crypto.createHash('sha256');
                const response = await fetch(asset.browser_download_url);
                await pipeline(response.body, hash);
                
                return {
                  version: release.tag_name,
                  build_date: Math.floor(new Date(release.published_at).getTime() / 1000),
                  filename: asset.name,
                  size: asset.size,
                  sha256sum: hash.digest('hex'),
                  url: asset.browser_download_url.replace(
                    'github.com', 
                    'mirror.example.com'  // 代理替换
                  ),
                  release_url: release.html_url
                };
              };

              // 3. 并行处理所有有效固件
              const allFirmwares = [];
              for (const release of releases) {
                const validAssets = release.assets.filter(a => 
                  a.name.toLowerCase().includes('openwrt') && 
                  /combined.*efi\.img\.gz$/i.test(a.name)
                );

                if (validAssets.length === 0) {
                  console.warn(`⚠️ ${release.tag_name} 无有效固件`);
                  continue;
                }

                for (const asset of validAssets) {
                  allFirmwares.push(await processAsset(release, asset));
                }
              }

              if (allFirmwares.length === 0) {
                throw new Error('所有发布中均未找到有效固件');
              }

              // 4. 按构建日期降序排序
              const sortedFirmwares = allFirmwares.sort((a, b) => b.build_date - a.build_date);
              console.log(`✅ 共处理 ${sortedFirmwares.length} 个有效固件`);

              // 5. 生成元数据
              const metadata = {
                updated_at: new Date().toISOString(),
                versions: sortedFirmwares.slice(0, 5),  // 确保最多5个
                count: sortedFirmwares.length
              };

            //const buildDate = Math.floor(new Date(workflowStartTime).getTime() / 1000);

            
            const json = {
              "x86_64": [
                {
                  "build_date": String(build_date),
                  "sha256sum": sha256,
                  "url": proxiedUrl  // 使用带代理的URL
                }
              ]
            };
            //const fs = require('fs');
            fs.mkdirSync('tmp-api', { recursive: true });
            fs.writeFileSync('tmp-api/fw.json', JSON.stringify(json, null, 4));    
        
              // 设置输出
              core.setOutput('latest_version', sortedFirmwares[0].version);
              core.setOutput('total_firmwares', sortedFirmwares.length);
              return metadata;

            } catch (error) {
              core.setFailed(`处理失败: ${error.message}`);
              process.exit(1);
            }

      - name: 更新API分支
        run: |
          # 配置Git
          git config --global user.name "OTA Updater"
          git config --global user.email "ota@users.noreply.github.com"
          
          # 检出api分支
          git fetch origin api
          git checkout api
          
          # 更新文件
          mkdir -p tmp-api
          cp -fv tmp-api/fw.json .
          
          # 提交变更
          if ! git diff --quiet --exit-code; then
            git add fw.json
            git commit -m "更新固件列表: ${{ steps.get_releases.outputs.latest_version }}等${{ steps.get_releases.outputs.total_firmwares }}个版本"
            git push origin api
            echo "✅ 已更新api分支"
          else
            echo "⚠️ 无变更需要提交"
          fi

      - name: 清理
        run: rm -rf tmp-api
