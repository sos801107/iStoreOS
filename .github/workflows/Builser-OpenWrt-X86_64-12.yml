name: Builser-OpenWrt-X86_64-12

#CI计划
on:
  #自动编译：当Auto-Clean运行完成后
  workflow_run:
    workflows: ["Auto-Clean"]
    types:
      - completed
  #手动编译
  workflow_dispatch:


env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64-openwrt.config
  DIY_SCRIPT: diy/diy-openwrt.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo -E apt-get update -y
        sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev python3-setuptools g++ file clang nano genisoimage
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: 合并磁盘
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: 结续
      uses: actions/checkout@main

    - name: 克隆源代码
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo $(date +"%Y%m%d%H") > version
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: 生成变量
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE_TAG=$(date +"%Y%m%d")" >> $GITHUB_ENV

    - name: 缓存工具链
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.FIRMWARE_TAG }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    - name: 安装feeds
      run: |
        cd $OPENWRT_PATH
        sed -i "1isrc-git nas https://github.com/linkease/nas-packages.git;master\n" feeds.conf.default        
        sed -i "2isrc-git nas_luci https://github.com/linkease/nas-packages-luci.git;main\n" feeds.conf.default        
        sed -i "3isrc-git turboacc https://github.com/chenmozhijin/turboacc.git;luci\n" feeds.conf.default        
        sed -i "4isrc-git turboaccpackage https://github.com/chenmozhijin/turboacc.git;package\n" feeds.conf.default        
        sed -i "5isrc-git theme https://github.com/sbwml/luci-theme-argon;openwrt-24.10\n" feeds.conf.default        
        sed -i "6isrc-git small https://github.com/kenzok8/small;master\n" feeds.conf.default      
        sed -i "7isrc-git kenzo https://github.com/kenzok8/openwrt-packages;master\n" feeds.conf.default        
        sed -i "8isrc-git appota https://github.com/sos801107/istoreos-ota;op\n" feeds.conf.default          
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL

    - name: 下载软件包
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传文件夹目录
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FIRMWARE_TAG }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: 整理文件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        
        mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz openwrt-24.10.2-$(date +"%Y%m%d%H")-x86-64-squashfs-combined-efi.img.gz
        mv openwrt-x86-64-generic-squashfs-combined.img.gz openwrt-24.10.2-$(date +"%Y%m%d%H")-x86-64-squashfs-combined.img.gz

        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        # rm -rf packages feeds.buildinfo version.buildinfo
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: 将固件上传到 Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FIRMWARE_TAG }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: 上传固件以发布Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: OpenWrt-24.10.2-X86_64 for ${{ env.DATE }}
        allowUpdates: true
        tag: OpenWrt-X86_64
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/openwrt-24.10.2*.img.gz
        body: |
          ### 📒 固件信息
          💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          📂 固件源码: ${{ env.REPO_URL }}
          🌳 源码分支: ${{ env.REPO_BRANCH }}
          🚀 内核版本: ${{ env.KERNEL }}
          🌐 默认地址: 192.168.1.1
          👤 用户名: root
          🔒 默认密码: 空

  generate-ota-json:
    name: 生成OTA升级文件
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: 检出主分支
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: 获取最近5个固件
        id: get_releases
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const crypto = require('crypto');
            const { promisify } = require('util');
            const stream = require('stream');
            const pipeline = promisify(stream.pipeline);
            try {
              // 1. 获取最近5个发布（分页处理）
              const releases = await github.paginate(
                github.rest.repos.listReleases,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 5,  // 只获取最新5个
                  request: { timeout: 15000 }
                }
              );
              if (releases.length === 0) {
                throw new Error('仓库中没有发布版本');
              }
              console.log(`📦 共获取 ${releases.length} 个发布`);
              // 2. 处理每个发布的固件
              const processAsset = async (release, asset) => {
                console.log(`⏳ 处理 ${release.tag_name} 的 ${asset.name}`);
                
                // 流式下载计算SHA256
                const hash = crypto.createHash('sha256');
                const response = await fetch(asset.browser_download_url);
                await pipeline(response.body, hash);
                
                return {
                  x86_64: release.tag_name,
                  build_date: Math.floor(new Date(release.published_at).getTime() / 1000),
                  filename: asset.name,
                  size: asset.size,
                  sha256sum: hash.digest('hex'),
                  url: asset.browser_download_url.replace(
                   // 'github.com', 
                   // 'mirror.example.com'  // 代理替换
                  ),
                  release_url: release.html_url
                };
              };
              // 3. 并行处理所有有效固件
              const allFirmwares = [];
              for (const release of releases) {
                const validAssets = release.assets.filter(a => 
                  a.name.toLowerCase().includes('openwrt') && 
                  /combined.*efi\.img\.gz$/i.test(a.name)
                );
                if (validAssets.length === 0) {
                  console.warn(`⚠️ ${release.tag_name} 无有效固件`);
                  continue;
                }
                for (const asset of validAssets) {
                  allFirmwares.push(await processAsset(release, asset));
                }
              }
              if (allFirmwares.length === 0) {
                throw new Error('所有发布中均未找到有效固件');
              }
              // 4. 按构建日期降序排序
              const sortedFirmwares = allFirmwares.sort((a, b) => b.build_date - a.build_date);
              console.log(`✅ 共处理 ${sortedFirmwares.length} 个有效固件`);
              // 5. 生成元数据
              const metadata = {
                //updated_at: new Date().toISOString(),
                x86_64: sortedFirmwares.slice(0, 1),  // 确保最多5个
                count: sortedFirmwares.length
              };
              // 保存文件
              fs.mkdirSync('tmp-api', { recursive: true });
              fs.writeFileSync('tmp-api/opfw.json', JSON.stringify(metadata, null, 2));
              
              // 设置输出
              core.setOutput('latest_version', sortedFirmwares[0].version);
              core.setOutput('total_firmwares', sortedFirmwares.length);
              return metadata;
            } catch (error) {
              core.setFailed(`处理失败: ${error.message}`);
              process.exit(1);
            }
      - name: 更新API分支
        run: |
          # 配置Git
          git config --global user.name "OTA Updater"
          git config --global user.email "ota@users.noreply.github.com"
          
          # 检出api分支
          git fetch origin api
          git checkout api
          
          # 更新文件
          mkdir -p tmp-api
          cp -fv tmp-api/opfw.json .
          
          # 提交变更
          if ! git diff --quiet --exit-code; then
            git add opfw.json
            git commit -m "更新固件列表: ${{ steps.get_releases.outputs.latest_version }}等${{ steps.get_releases.outputs.total_firmwares }}个版本"
            git push origin api
            echo "✅ 已更新api分支"
          else
            echo "⚠️ 无变更需要提交"
          fi
      - name: 清理
        run: rm -rf tmp-api
